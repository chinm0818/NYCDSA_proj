}
wf = 1:5e2
for(i in wf){
w = seq(i, 1, -1)/(sum(1:50000))
print(w)
}
wf = 1:5e2
for(i in wf){
w = seq(i, 1, -1)/(sum(1:i))
print(w)
}
for(i in wf){
w = seq(i, 1, -1)/(sum(1:i))
print(w)
}
sumx = 0
for(i in 1:50000)
{sumx = sumx + i * (50001 - i)}
sumx/sum(1:50000)
sumx = 0
for(i in 1:50000)
{sumx = sumx + i * (50001 - i)
print(sumx)}
data(cars)
print(head(cars))
data(cars)
print(head(cars,5))
cars[state = c('NY','CA')]
cars[cars[state == c('NY','CA')]]
cars
state = sample(1:3, length(cars), replace = TRUE)
state
?length
shape(cars)
dim(cars)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state
levels(state) = c("NY", "CA", "CT")
state
state = factor(state)
state
levels(state) = c('NY', 'CA', 'CT')
state
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
cars2
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
print(head(cars2), 5)
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars2, ratio)
print(head(cars2))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars2, ratio)
print(head(cars2))
print(avg(cars2$ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars2, ratio)
print(head(cars2))
print(mean(cars2$ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars2, ratio)
print(head(cars2))
print(head(cars2$ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, c(state,ratio))
print(head(cars2))
print(head(cars2$ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = rbind(cars, c(state,ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
print(ratio)
print(head(cars2))
print(head(cars2$ratio))
cars['dist']
cars['dist']/cars['speed']
ratio = cars['dist']/cars['speed']
ratio
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
print(head(cars2))
print(head(cars2$ratio))
ratio
cars2 = cbind(cars, ratio)
cars2
cars2 = cbind(cars2, state)
cars2
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars, ratio)
print(head(cars2))
print(head(cars2))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars2, ratio)
print(head(cars2))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars2, ratio)
colnames(car2) = c('dist','speed','state','ratio')
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars2, ratio)
colnames(cars2) = c('dist','speed','state','ratio')
print(head(cars2))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars2, ratio)
colnames(cars2) = c('dist','speed','state','ratio')
print(head(cars2))
print(mean(cars2['ratio']))
class(cars['ratio'])
class(cars2['ratio'])
mean(cars[2])
mean(float(cars[2]))
mean(as.float(cars[2]))
mean(as.numeric(cars[2]))
shiny::runApp('NYCDSA_proj/projects/Nyc_Oil')
runApp('NYCDSA_proj/projects/Nyc_Oil')
shiny::runApp('NYCDSA_proj/projects/Nyc_Oil')
oil = oil %>% rename(Retirement = Estimated.retirement.date.of.boiler..assuming.35.year.average.useful.life)
oil = read.csv('oil_boilers.csv')
setwd("~/NYCDSA_proj/projects")
oil = read.csv('oil_boilers.csv')
oil = oil %>% rename(Retirement = Estimated.retirement.date.of.boiler..assuming.35.year.average.useful.life)
oil = oil %>% rename(Retirement = Estimated.retirement.date.of.boiler..assuming.35.year.average.useful.life.)
setwd("~/NYCDSA_proj/projects/Nyc_Oil")
write.csv(oil, 'oil_boilers.csv')
runApp()
runApp()
?htmlOutput
runApp()
runApp()
test_filter = oil2 %>%
filter(., Borough == Bronx) %>%
filter(., Retirement >= 2018 & Retirement <= 2020) %>%
filter(., Natural.Gas.Utility..Con.Edison.or.National.Grid %in% 'National Grid')
clean_oil = oil %>%
filter(., !is.na(Latitude)) %>%
rename(Retirement = Estimated.retirement.date.of.boiler..assuming.35.year.average.useful.life. )
clean_oil = oil %>%
filter(., !is.na(Latitude))
test_filter = clean_oil %>%
filter(., Borough == Bronx) %>%
filter(., Retirement >= 2018 & Retirement <= 2020) %>%
filter(., Natural.Gas.Utility..Con.Edison.or.National.Grid %in% 'National Grid')
test_filter = clean_oil %>%
filter(., Borough == 2) %>%
filter(., Retirement >= 2018 & Retirement <= 2020) %>%
filter(., Natural.Gas.Utility..Con.Edison.or.National.Grid %in% 'National Grid')
dim(test_filter)
View(test_filter)
req(test_filter)
?req
req(test_filter) = True
req(test_filter) == TRUE
runApp()
runApp()
runApp()
oilnames = colnames(test_filter)
runApp()
dummy_filter = lapply(assign_zero, oilnames)
dim(dummy_filter)
dummy_filter = lapply(oilnames, assign_zero)
assign_zero = function(L){
test_filter$L = 0
}
dummy_filter = lapply(oilnames, assign_zero)
assign_zero = function(L){
test_filter$L = numeric(0)
}
dummy_filter = lapply(oilnames, assign_zero)
dim(dummy_filter)
zmat = data.frame(matrix(0, nrow =1, ncol = 42))
dim(zmat)
colnames(zmat) = colnames(oil)
head(zmat)
setwd("~/NYCDSA_proj/projects/Nyc_Oil")
write.csv(zmat, 'dummy.csv')
runApp()
runApp()
runApp()
runApp()
dummy = read.csv('dummy.csv')
dim(dummy)
dim(dummy)[1]
dim(dummy)[1] == 1
runApp()
sumdummy = dummy %>%
group_by(., Borough) %>%
summarize(., cnt = sum(Borough))%>% #sum of anything just to get a zero val
as.data.frame
sumdummy
dim(sumdummy)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?elif
?elseif
runApp()
runApp()
runApp()
test_filter
is.null(test_filter)
length(test_filter)
dim(test_filter)[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nrows(sumdummy)
nrow(sumdummy)
test_filter
nrow(test_filter)
sumdummy = dummy %>%
group_by(., Borough) %>%
summarize(., cnt = sum(Borough))%>% #sum of anything just to get a zero val
as.data.frame
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?gvisColumnChart
runApp()
runApp()
runApp()
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(sumdummy, aes(x= Borough, y = cnt)) + geom_bar(stat = cnt)
ggplot(sumdummy, aes(x= Borough, y = cnt)) + geom_bar(stat = 'cnt')
ggplot(oil, aes(x= Borough, y = cnt)) + geom_bar()
ggplot(oil, aes(x= Borough)) + geom_bar()
runApp()
runApp()
?absolutePanel
?fluidRow
runApp()
runApp()
runApp()
runApp()
oil = oil %>%
mutate(., Average.Consumption = mean(Total.Estimated.Cosumption...High.Estimate..MMBTUs., Total.Estimated.Cosumption...Low.Estimate...MMBTUs.))
oil = oil %>%
mutate(., Average.Consumption = (Total.Estimated.Cosumption...High.Estimate..MMBTUs. + Total.Estimated.Cosumption...Low.Estimate...MMBTUs.)/2)
colnames(oil)
head(Average.Consumption)
head(oil$Average.Consumption)
write.csv(oil, "oil.boilers.csv")
write.csv(oil, "oil_boilers.csv")
runApp()
consumption = oil %>%
group_by(., Borough) %>%
summarize(., Fuel.Consumption = sum(Average.Consumption))
head(consumption)
consumptionP = ggplot(consumption, aes(x = Borough, y = Fuel.Consumption)) + geom_bar(stat = 'identity')
consumptionP
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?leafletOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_bar
?filter
runApp()
?scale_x_discrete
runApp()
runApp()
runApp()
runApp()
?gvisBubbleChart
runApp()
runApp()
runApp()
?gvisBarChart
runApp()
runApp()
class(oil$Borough)
oil = oil %>% mutate(., as.factor(Borough))
class(oil$Borough)
oil = oil %>% mutate(., Borough = as.factor(Borough))
class(oil$Borough)
write.csv(oil, 'oil_boilers.csv')
runApp()
?as.factor
factor(Borough)
factor(oil$Borough)
oil = oil %>% mutate(., Borough = as.factor(Borough, labels = c('Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island')))
levels(oil$Borough)
levels(oil$Borough) = c('Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island')
levels(oil$Borough)
write.csv(oil, 'oil_boilers.csv')
head(oil$Borough)
runApp()
runApp()
runApp()
consumption = oil %>%
group_by(., Borough) %>%
summarize(., Fuel.Consumption = sum(Average.Consumption))
consumption
gvisColumnChart(consumption)
plot(gvisColumnChart(consumption))
runApp()
runApp()
runApp()
runApp()
runApp()
?gvisColumnChart
runApp()
runApp()
gvisTable(consumption)
plot(gvisTable(consumption))
runApp()
runApp()
runApp()
runApp()
