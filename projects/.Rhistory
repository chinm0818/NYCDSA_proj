print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
cars2
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
print(head(cars2), 5)
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars2, ratio)
print(head(cars2))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars2, ratio)
print(head(cars2))
print(avg(cars2$ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars2, ratio)
print(head(cars2))
print(mean(cars2$ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars2, ratio)
print(head(cars2))
print(head(cars2$ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, c(state,ratio))
print(head(cars2))
print(head(cars2$ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = rbind(cars, c(state,ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
print(ratio)
print(head(cars2))
print(head(cars2$ratio))
cars['dist']
cars['dist']/cars['speed']
ratio = cars['dist']/cars['speed']
ratio
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
print(head(cars2))
print(head(cars2$ratio))
ratio
cars2 = cbind(cars, ratio)
cars2
cars2 = cbind(cars2, state)
cars2
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars, ratio)
print(head(cars2))
print(head(cars2))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars2, ratio)
print(head(cars2))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars2, ratio)
colnames(car2) = c('dist','speed','state','ratio')
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars2, ratio)
colnames(cars2) = c('dist','speed','state','ratio')
print(head(cars2))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars2, ratio)
colnames(cars2) = c('dist','speed','state','ratio')
print(head(cars2))
print(mean(cars2['ratio']))
class(cars['ratio'])
class(cars2['ratio'])
mean(cars[2])
mean(float(cars[2]))
mean(as.float(cars[2]))
mean(as.numeric(cars[2]))
library(ggplot2)
library(ggplot2)
library(maps)
library(dplyr)
library(mapdata)
library(rgdal)
#energy = read.csv('Energy_use.csv')
oil = read.csv('oil_boilers.csv')
#we'll look at data on oil_boilers in NYC
#let's start by inspecting data
print(dim(oil))
print(sum(is.na(oil$Latitude)))
print(colnames(oil))
#let's get an idea of of how many values are not on map
# about 40% of entrys have no lat/long.
# let's get a better idea of whats missing and what we can extrapolate
#first. Which boroughs is this data missing
# compare number of missing data to how much is there per borough
na_count = oil %>%
group_by(., Borough) %>%
summarise(., count_na = sum(is.na(Latitude)), counts = n()) %>%
mutate(., perc_missing = count_na/counts * 100)
#turns out the most missing data is from manhattan
#but there are so many data points there it might not matter
# let's explore what's left when we remove data w/o location
oil2 = oil %>%
filter(., !is.na(Latitude))
#What questions do we want to answer with this data set?
#1. Where are these boilers located
#2. When where they installed
#3. How much fuel do they consume?
#3a. How much money is fuel is consumed?
#4. When are they due to being replaced?
#5.
#messing with plotting spatial data
oil_map = ggplot() + geom_point(data = oil, aes(x = Longitude, y = Latitude, color = 'red')) + theme(panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))
counties = readOGR("nycbb.shp", layer = "nycbb")
nyc_base = ggplot() + geom_polygon(data = counties, aes(x=long, y=lat, group = group))
+ theme(panel.background = element_rect(fill = NA))
combined_map = ggplot() +
geom_polygon(data = counties, aes(x=long, y=lat, group = group)) +
geom_point(data = oil, aes(x = Longitude, y = Latitude, color = 'red'))
# to split up code acros multiple rows, leave operator at the end of break
# did a search for borough boundary shp files
# https://data.cityofnewyork.us/City-Government/Borough-Boundaries/tqmj-j8zm/data
oil = read.csv('oil_boilers.csv')
setwd("~/NYCDSA_proj/projects")
oil = read.csv('oil_boilers.csv')
print(dim(oil))
print(sum(is.na(oil$Latitude)))
print(colnames(oil))
#let's get an idea of of how many values are not on map
# about 40% of entrys have no lat/long.
# let's get a better idea of whats missing and what we can extrapolate
#first. Which boroughs is this data missing
# compare number of missing data to how much is there per borough
na_count = oil %>%
group_by(., Borough) %>%
summarise(., count_na = sum(is.na(Latitude)), counts = n()) %>%
mutate(., perc_missing = count_na/counts * 100)
na_count
install.packages("shiny")
oil_map = ggplot() + geom_point(data = oil, aes(x = Longitude, y = Latitude, color = 'red')) + theme(panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))
counties = readOGR("nycbb.shp", layer = "nycbb")
nyc_base = ggplot() + geom_polygon(data = counties, aes(x=long, y=lat, group = group))
+ theme(panel.background = element_rect(fill = NA))
combined_map = ggplot() +
geom_polygon(data = counties, aes(x=long, y=lat, group = group)) +
geom_point(data = oil, aes(x = Longitude, y = Latitude, color = 'red'))
combined_map
oil_map = ggplot() + geom_point(data = oil, aes(x = Longitude, y = Latitude, color = 'red')) + theme(panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))
oil_map
nyc_base = ggplot() + geom_polygon(data = counties, aes(x=long, y=lat, group = group))
+ theme(panel.background = element_rect(fill = NA))
nyc_base = ggplot() + geom_polygon(data = counties, aes(x=long, y=lat, group = group))
nyc_base
shiny::runApp('~/NYCDSA lecture slides/Week 2/Practice')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
?renderPlot
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runexample('03_reactivity')
runExample('03_reactivity')
View(oil)
view(oil2)
oil2 = oil %>%
filter(., !is.na(Latitude))
write.csv(oil2, 'clean_oil.csv')
runApp('Nyc_Oil')
colnames(clean_oil)
clean_oil = oil %>%
filter(., !is.na(Latitude))
clean_oil = oil %>%
filter(., !is.na(Latitude))
colnames(clean_oil)
clean_oil = oil %>%
filter(., !is.na(Latitude)) %>%
rename(Estimated.retirement.date.of.boiler..assuming.35.year
clean_oil = oil %>%
filter(., !is.na(Latitude)) %>%
rename(Estimated.retirement.date.of.boiler..assuming.35.year.average.useful.life. = Retirement)
clean_oil = oil %>%
filter(., !is.na(Latitude)) %>%
rename(Estimated.retirement.date.of.boiler..assuming.35.year.average.useful.life. = Retirement)
clean_oil = oil %>%
filter(., !is.na(Latitude)) %>%
rename(Retirement = Estimated.retirement.date.of.boiler..assuming.35.year.average.useful.life. )
filtered_oil = clean_oil %>%
filter(., Retirement >= year1 & Retirement <= 2020)
year1 = 2010
year2 = 2020
filtered_oil = clean_oil %>%
filter(., Retirement >= year1 & Retirement <= 2020)
head(filtered_oil)
head(filtered_oil$Retirement)
year1 = 2010
year2 = 2020
filtered_oil = clean_oil %>%
filter(., Retirement >= year1 & Retirement <= year2)
runExample('03_reactive')
runExample('03_reactivity')
write.csv(clean_oil, clean_oil.csv)
write.csv(clean_oil, 'clean_oil.csv')
write.csv(clean_oil, 'clean_oil.csv')
?between
years = c(2010,2020)
filtered_oil2 = filter(clean_oil, between(Retirement, years)
)
runExample('03_reactivity')
runExample('03_reactivit')
runExample('05_sliders')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
year
runApp('Nyc_Oil')
runApp('Nyc_Oil')
year1 = 2010
year2 = 2020
filtered_oil = clean_oil %>%
filter(., Retirement >= year1 & Retirement <= year2)
combined_map = ggplot() +
geom_polygon(data = counties, aes(x=long, y=lat, group = group)) +
geom_point(data = filtered_oil, aes(x = Longitude, y = Latitude, color = 'red'))
combined_map
year1 = 2035
year2 = 2040
filtered_oil = clean_oil %>%
filter(., Retirement >= year1 & Retirement <= year2)
combined_map = ggplot() +
geom_polygon(data = counties, aes(x=long, y=lat, group = group)) +
geom_point(data = filtered_oil, aes(x = Longitude, y = Latitude, color = 'red'))
year1 = 2035
year2 = 2040
filtered_oil = clean_oil %>%
filter(., Retirement >= year1 & Retirement <= year2)
combined_map = ggplot() +
geom_polygon(data = counties, aes(x=long, y=lat, group = group)) +
geom_point(data = filtered_oil, aes(x = Longitude, y = Latitude, color = 'red'))
combined_map
year1 = 2039
year2 = 2040
filtered_oil = clean_oil %>%
filter(., Retirement >= year1 & Retirement <= year2)
combined_map = ggplot() +
geom_polygon(data = counties, aes(x=long, y=lat, group = group)) +
geom_point(data = filtered_oil, aes(x = Longitude, y = Latitude, color = 'red'))
combined_map
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
?mainPanel
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
?sliderInput
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
?renderPlot
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
?renderPlot
retire_count = filtere_oil %>%
group_by(., Borough) %>%
Summarize(., n())
retire_count = filtered_oil %>%
group_by(., Borough) %>%
Summarize(., n())
retire_count = filtered_oil %>%
group_by(., Borough) %>%
summarize(., n())
retire_count
?count_plot
retire_count = filtered_oil %>%
group_by(., Borough) %>%
summarize(., count = n())
count_plot = ggplot(data=retire_count, aes(x = Borough, y = count))
?geom_bar
count_plot + geom_bar(position = 'identity')
count_plot + geom_bar(position = identity)
?geom_bar
count_plot = ggplot(data=filtered_oil, aes(x = Borough))
count_plot
?geom_bar
count_plot + geom_bar()
runApp('Nyc_Oil')
runApp('Nyc_Oil')
year1 = 2039
year2 = 2040
filtered_oil = clean_oil %>%
filter(., Retirement >= year1 & Retirement <= year2) %>%
filter(., Natural.Gas.Utility..Con.Edison.or.National.Grid %in% c('National Grid', 'Con Edison'))
dim(filtered_oil)
filtered_oil = clean_oil %>%
filter(., Retirement >= year1 & Retirement <= year2) %>%
filter(., Natural.Gas.Utility..Con.Edison.or.National.Grid %in% c('National Grid'))
dim(filtered_oil)
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
mainPanel()
?mainPanel
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
?plotOutput
runApp('Nyc_Oil')
runApp('Nyc_Oil')
View(clean_oil)
runApp('Nyc_Oil')
runApp('Nyc_Oil')
getEample('03')
getExample('03')
install.packages("dygraphs")
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
install.packages("data.table")
runApp('Nyc_Oil')
runApp('Nyc_Oil')
runApp('Nyc_Oil')
install.packages("knitr")
df <- read.csv("NYC_Jobs.csv", stringsAsFactors = FALSE)
#View(df)
df <- tbl_df(df)
# 3.1
### First solution will transfer all the salary into annual
transform = function(x){
if (x=="Hourly"){
return (2080)
}else if(x == "Daily"){
return (260)
}else{
return (1)
}
}
df <- df %>%
mutate(Salary.Frequency=sapply(Salary.Frequency, transform)) %>%
mutate(Salary.Range.From=Salary.Range.From * Salary.Frequency) %>%
mutate(Salary.Range.To=Salary.Range.To * Salary.Frequency)
jobs = read.csv('NYC_Jobs.csv', stringsAsFactors = FALSE)
?summarise_at
runApp('Nyc_Oil')
